// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"file-storage/API/routes"
	"file-storage/Application/commands"
	"file-storage/Application/handlers"
	"file-storage/Application/queries"
	"file-storage/Domain/event"
	"file-storage/Domain/repository_interfaces"
	"file-storage/Infrastructure/config"
	"file-storage/Infrastructure/db"
	"file-storage/Infrastructure/processor"
	"file-storage/Infrastructure/publisher"
	"file-storage/Infrastructure/queue"
	"file-storage/Infrastructure/receiver"
	"file-storage/Infrastructure/repository"
)

// Injectors from wire.go:

func InitializeInfrastructureComponents() (*InfrastructureComponents, error) {
	configConfig := config.ProvideConfig()
	collection, err := db.ProvideMongoCollection(configConfig)
	if err != nil {
		return nil, err
	}
	fileRepository := repository.ProvideFileRepository(collection)
	jetStreamContext, err := queue.ProvideJetStreamContext(configConfig)
	if err != nil {
		return nil, err
	}
	eventPublisher, err := publisher.ProvideEventPublisher(jetStreamContext)
	if err != nil {
		return nil, err
	}
	eventProcessor := processor.InitializeEventProcessor(fileRepository)
	eventReceiver, err := receiver.NewJetStreamReceiver(jetStreamContext, eventProcessor)
	if err != nil {
		return nil, err
	}
	infrastructureComponents := &InfrastructureComponents{
		FileRepository: fileRepository,
		EventPublisher: eventPublisher,
		EventReceiver:  eventReceiver,
	}
	return infrastructureComponents, nil
}

func InitializeApi(FileRepository repository_interfaces.FileRepository, EventPublisher event.EventPublisher) (*routes.Router, error) {
	saveFileCommand := commands.ProvideSaveFileCommand(FileRepository, EventPublisher)
	saveFileHandler := handlers.NewSaveFileHandler(saveFileCommand)
	getFileQuery := queries.ProvideGetFileQuery(FileRepository)
	getFileHandler := handlers.NewGetFileHandler(getFileQuery)
	deleteFileCommand := commands.ProvideDeleteFileCommand(FileRepository)
	deleteFileHandler := handlers.NewDeleteFileHandler(deleteFileCommand)
	v := handlers.ProvideHandlers(saveFileHandler, getFileHandler, deleteFileHandler)
	handlersHandlers := handlers.NewHandlers(v)
	router := routes.NewRouter(handlersHandlers)
	return router, nil
}

// wire.go:

type InfrastructureComponents struct {
	FileRepository repository_interfaces.FileRepository
	EventPublisher event.EventPublisher
	EventReceiver  event.EventReceiver
}
