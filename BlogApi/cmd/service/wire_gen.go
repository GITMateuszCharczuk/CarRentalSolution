// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	controllers5 "blog-api/API/controllers"
	"blog-api/API/controllers/blog_post"
	controllers2 "blog-api/API/controllers/blog_post_comment"
	controllers3 "blog-api/API/controllers/blog_post_like"
	controllers4 "blog-api/API/controllers/blog_post_tag"
	"blog-api/API/server"
	"blog-api/API/validators"
	repository_interfaces2 "blog-api/Domain/repository_interfaces/blog_post_comment_repository"
	repository_interfaces3 "blog-api/Domain/repository_interfaces/blog_post_like_repository"
	"blog-api/Domain/repository_interfaces/blog_post_repository"
	repository_interfaces4 "blog-api/Domain/repository_interfaces/blog_post_tag_repository"
	datafetcher2 "blog-api/Domain/service_interfaces"
	"blog-api/Infrastructure/config"
	"blog-api/Infrastructure/data_fetcher"
	config2 "blog-api/Infrastructure/databases/postgres/config"
	"blog-api/Infrastructure/databases/postgres/mappers"
	"blog-api/Infrastructure/databases/postgres/repository/base/unit_of_work"
	repository3 "blog-api/Infrastructure/databases/postgres/repository/blog_post_comment_repository"
	repository4 "blog-api/Infrastructure/databases/postgres/repository/blog_post_like_repository"
	"blog-api/Infrastructure/databases/postgres/repository/blog_post_repository"
	repository2 "blog-api/Infrastructure/databases/postgres/repository/blog_post_tag_repository"
)

// Injectors from wire.go:

func InitializeInfrastructureComponents() (*InfrastructureComponents, error) {
	configConfig := config.ProvideConfig()
	postgresDatabase := config2.NewPostgresConfigProvider(configConfig)
	persistenceMapper := mappers.ProvideBlogPostResponsePersistenceMapper()
	unitOfWork := cqrs.ProvideUnitOfWork(postgresDatabase)
	blogPostQueryRepository := repository.ProvideBlogPostQueryRepository(postgresDatabase, persistenceMapper, unitOfWork)
	mappersPersistenceMapper := mappers.ProvideBlogPostRequestPersistenceMapper()
	persistenceMapper2 := mappers.ProvideBlogPostTagPersistenceMapper()
	blogPostTagCommandRepository := repository2.ProvideBlogPostTagCommandRepository(postgresDatabase, persistenceMapper2, blogPostQueryRepository, unitOfWork)
	blogPostCommandRepository := repository.ProvideBlogPostCommandRepository(postgresDatabase, mappersPersistenceMapper, blogPostTagCommandRepository, unitOfWork)
	persistenceMapper3 := mappers.ProvideBlogPostCommentPersistenceMapper()
	blogPostCommentQueryRepository := repository3.ProvideBlogPostCommentQueryRepository(postgresDatabase, persistenceMapper3, unitOfWork)
	blogPostCommentCommandRepository := repository3.ProvideBlogPostCommentCommandRepository(postgresDatabase, persistenceMapper3, unitOfWork)
	persistenceMapper4 := mappers.ProvideBlogPostLikePersistenceMapper()
	blogPostLikeQueryRepository := repository4.ProvideBlogPostLikeQueryRepository(postgresDatabase, persistenceMapper4, unitOfWork)
	blogPostLikeCommandRepository := repository4.ProvideBlogPostLikeCommandRepository(postgresDatabase, persistenceMapper4, unitOfWork, blogPostLikeQueryRepository)
	blogPostTagQueryRepository := repository2.ProvideBlogPostTagQueryRepository(postgresDatabase, persistenceMapper2, unitOfWork)
	dataFetcher := datafetcher.ProvideDataFetcherImpl(configConfig)
	infrastructureComponents := &InfrastructureComponents{
		Config:             configConfig,
		BlogQueryRepo:      blogPostQueryRepository,
		BlogCommandRepo:    blogPostCommandRepository,
		CommentQueryRepo:   blogPostCommentQueryRepository,
		CommentCommandRepo: blogPostCommentCommandRepository,
		LikeQueryRepo:      blogPostLikeQueryRepository,
		LikeCommandRepo:    blogPostLikeCommandRepository,
		TagQueryRepo:       blogPostTagQueryRepository,
		DataFetcher:        dataFetcher,
	}
	return infrastructureComponents, nil
}

func InitializeApi(blogQueryRepo repository_interfaces.BlogPostQueryRepository, blogCommandRepo repository_interfaces.BlogPostCommandRepository, commentQueryRepo repository_interfaces2.BlogPostCommentQueryRepository, commentCommandRepo repository_interfaces2.BlogPostCommentCommandRepository, likeQueryRepo repository_interfaces3.BlogPostLikeQueryRepository, likeCommandRepo repository_interfaces3.BlogPostLikeCommandRepository, tagQueryRepo repository_interfaces4.BlogPostTagQueryRepository, dataFetcher datafetcher2.DataFetcher, config3 *config.Config) (*server.Server, error) {
	validate := validators.ProvideValidator()
	createBlogPostController := controllers.NewCreateBlogPostController(validate)
	getBlogPostController := controllers.NewGetBlogPostController(validate)
	getBlogPostsController := controllers.NewGetBlogPostsController(validate)
	updateBlogPostController := controllers.NewUpdateBlogPostController(validate)
	deleteBlogPostController := controllers.NewDeleteBlogPostController(validate)
	createBlogPostCommentController := controllers2.NewCreateBlogPostCommentController(validate)
	deleteBlogPostCommentController := controllers2.NewDeleteBlogPostCommentController(validate)
	getBlogPostCommentsController := controllers2.NewGetBlogPostCommentsController(validate)
	getBlogPostCommentsCountController := controllers2.NewGetBlogPostCommentsCountController(validate)
	createLikeForBlogPostController := controllers3.NewCreateLikeForBlogPostController(validate)
	deleteLikeForBlogPostController := controllers3.NewDeleteLikeForBlogPostController(validate)
	getLikesForBlogPostController := controllers3.NewGetLikesForBlogPostController(validate)
	getTagsController := controllers4.NewGetTagsController(validate)
	v := controllers5.ProvideControllers(createBlogPostController, getBlogPostController, getBlogPostsController, updateBlogPostController, deleteBlogPostController, createBlogPostCommentController, deleteBlogPostCommentController, getBlogPostCommentsController, getBlogPostCommentsCountController, createLikeForBlogPostController, deleteLikeForBlogPostController, getLikesForBlogPostController, getTagsController)
	controllersControllers := controllers5.NewControllers(v)
	serverServer := server.ProvideServer(controllersControllers, config3)
	return serverServer, nil
}

// wire.go:

type InfrastructureComponents struct {
	Config             *config.Config
	BlogQueryRepo      repository_interfaces.BlogPostQueryRepository
	BlogCommandRepo    repository_interfaces.BlogPostCommandRepository
	CommentQueryRepo   repository_interfaces2.BlogPostCommentQueryRepository
	CommentCommandRepo repository_interfaces2.BlogPostCommentCommandRepository
	LikeQueryRepo      repository_interfaces3.BlogPostLikeQueryRepository
	LikeCommandRepo    repository_interfaces3.BlogPostLikeCommandRepository
	TagQueryRepo       repository_interfaces4.BlogPostTagQueryRepository
	DataFetcher        datafetcher2.DataFetcher
}
