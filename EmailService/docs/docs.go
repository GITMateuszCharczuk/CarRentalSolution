// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/email-service/api/emails": {
            "get": {
                "description": "Retrieves a list of all emails.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emails"
                ],
                "summary": "Get all emails",
                "responses": {
                    "200": {
                        "description": "List of emails retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.GetEmailsResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.GetEmailsResponse400"
                        }
                    },
                    "500": {
                        "description": "Server error during emails retrieval",
                        "schema": {
                            "$ref": "#/definitions/contract.GetEmailsResponse500"
                        }
                    }
                }
            }
        },
        "/email-service/api/emails/{id}": {
            "get": {
                "description": "Retrieves an email based on its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emails"
                ],
                "summary": "Get email by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique Email ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.GetEmailResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.GetEmailResponse400"
                        }
                    },
                    "404": {
                        "description": "Email not found",
                        "schema": {
                            "$ref": "#/definitions/contract.GetEmailResponse404"
                        }
                    },
                    "500": {
                        "description": "Server error during email retrieval",
                        "schema": {
                            "$ref": "#/definitions/contract.GetEmailResponse500"
                        }
                    }
                }
            }
        },
        "/email-service/api/send-email": {
            "post": {
                "description": "Sends an email using the provided data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emails"
                ],
                "summary": "Send an email",
                "parameters": [
                    {
                        "description": "Email data",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contract.SendEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email sent successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.SendEmailResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or data",
                        "schema": {
                            "$ref": "#/definitions/contract.SendEmailResponse400"
                        }
                    },
                    "500": {
                        "description": "Server error during email sending",
                        "schema": {
                            "$ref": "#/definitions/contract.SendEmailResponse500"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "contract.GetEmailResponse200": {
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/models.Email"
                },
                "message": {
                    "type": "string",
                    "example": "Email retrieved successfully."
                },
                "title": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "contract.GetEmailResponse400": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Empty email object",
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid email request."
                },
                "title": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "contract.GetEmailResponse404": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Empty email object",
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "The requested email was not found."
                },
                "title": {
                    "type": "string",
                    "example": "Not Found"
                }
            }
        },
        "contract.GetEmailResponse500": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Empty email object",
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "An unexpected error occurred."
                },
                "title": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "contract.GetEmailsResponse200": {
            "type": "object",
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Email"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Emails retrieved successfully."
                },
                "title": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "contract.GetEmailsResponse400": {
            "type": "object",
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request for emails."
                },
                "title": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "contract.GetEmailsResponse500": {
            "type": "object",
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "An unexpected error occurred."
                },
                "title": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "contract.SendEmailRequest": {
            "type": "object",
            "required": [
                "body",
                "from",
                "subject",
                "to"
            ],
            "properties": {
                "body": {
                    "type": "string",
                    "example": "This is the body of the email."
                },
                "from": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "subject": {
                    "type": "string",
                    "example": "Hello"
                },
                "to": {
                    "type": "string",
                    "example": "recipient@example.com"
                }
            }
        },
        "contract.SendEmailResponse200": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Email sent successfully."
                },
                "title": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "contract.SendEmailResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request for sending email."
                },
                "title": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "contract.SendEmailResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "An unexpected error occurred while sending email."
                },
                "title": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "models.Email": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string",
                    "example": "This is the body of the email."
                },
                "from": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "12345"
                },
                "subject": {
                    "type": "string",
                    "example": "Hello World"
                },
                "to": {
                    "type": "string",
                    "example": "recipient@example.com"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
