services:
  api-gateway:
    build:
      context: ../ApiGateway
      dockerfile: ./docker/Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000"
    environment:
      - SERVICE_PORT=:8000
      - FILE_SERVICE_URL=http://file-storage-api:8082
      - EMAIL_SERVICE_URL=http://email-service-api:8084
      - IDENTITY_API_URL=http://identity-api:8085
      - RENTAL_API_URL=http://rental-api:8088
      - BLOG_API_URL=http://blog-api:8087
      - REQUEST_SENT_LIMIT=100
      - REQUEST_SENT_TIME_WINDOW=60
      - REQUEST_SIZE_LIMIT=10
      - ENV=PROD
    depends_on:
      - file-storage-api
      - email-service-api
      - identity-api
      - rental-api
      - blog-api
    networks:
      - docker-network
  identity-api:
    build:
      context: ../IdentityApi
      dockerfile: ./docker/Dockerfile.API
    ports:
      - "8085:8085"
    environment:
      # Environment
      ENV: prod
      # Service Configuration
      SERVICE_ADDRESS: /identity-api/api
      SERVICE_PORT: :8085
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis
      # JWT Configuration
      ACCESS_TOKEN_TTL: 15
      REFRESH_TOKEN_TTL: 30
      SECRET_KEY: your_secret_key_here
      # PostgreSQL Configuration
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: Identity_db
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      RUN_POSTGRES_MIGRATION: "true"
    networks:
      - docker-network
  rental-api:
    build:
      context: ../RentalApi
      dockerfile: ./docker/Dockerfile.API
    ports:
      - "8088:8088"
    environment:
      # Environment
      ENV: prod
      # Service Configuration
      SERVICE_ADDRESS: /rental-api/api
      SERVICE_PORT: :8088
      # PostgreSQL Configuration
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rental_db
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      RUN_POSTGRES_MIGRATION: "true"
      IDENTITY_API_URL: http://identity-api:8085
      EMAIL_SERVICE_BASE_URL: http://email-service-api:8084
      COMPANY_EMAIL: test@test.com
    networks:
      - docker-network
  blog-api:
    ports:
      - "8087:8087"
    build:
      context: ../BlogApi
      dockerfile: ./docker/Dockerfile.API
    environment:
      # Environment
      ENV: prod
      # Service Configuration
      SERVICE_ADDRESS: /blog-api/api
      SERVICE_PORT: :8087
      IDENTITY_API_URL: http://identity-api:8085
      # PostgreSQL Configuration
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: blog_db
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      RUN_POSTGRES_MIGRATION: "true"
    networks:
      - docker-network
  email-service-api:
    build:
      context: ../EmailService
      dockerfile: ./docker/Dockerfile.API
    container_name: email-service-api
    environment:
      NATS_URL: nats://nats:4222
      STREAM_NAME: email_stream
      STREAM_SUBJECTS: email-events.*
      MAILHOG_HOST: mailhog
      MAILHOG_PORT: 1025
      MAILHOG_USERNAME:
      MAILHOG_PASSWORD:
      MAILHOG_URL: mailhog:8025
      SERVICE_ADDRESS: /email-service/api
      SERVICE_PORT: :8084
      DEFAULT_EMAIL_SENDER: test@test.com
      IDENTITY_API_URL: http://identity-api:8085
      ENV: prod
    networks:
      - docker-network
  file-storage-api:
    build:
      context: ../FileStorage
      dockerfile: ./docker/Dockerfile.API
    container_name: file-storage-api
    environment:
      MONGO_DB_NAME: FileDB
      MONGO_DB_URL: mongodb://mongo:27017
      MONGO_DB_COLLECTION_NAME: files
      NATS_URL: nats://nats:4222
      STREAM_NAME: file_stream
      STREAM_SUBJECTS: file-events.*
      ENV: prod
      SERVER_ADDRESS: :8082
      SERVICE_ADDRESS: /file-storage/api
      IDENTITY_API_URL: http://identity-api:8085
    networks:
      - docker-network
networks:
  docker-network:
    driver: bridge