// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	controllers5 "rental-api/API/controllers"
	controllers3 "rental-api/API/controllers/car_image"
	"rental-api/API/controllers/car_offer"
	controllers2 "rental-api/API/controllers/car_order"
	controllers4 "rental-api/API/controllers/car_tag"
	"rental-api/API/server"
	"rental-api/API/validators"
	repository_interfaces3 "rental-api/Domain/repository_interfaces/car_image_repository"
	"rental-api/Domain/repository_interfaces/car_offer_repository"
	repository_interfaces2 "rental-api/Domain/repository_interfaces/car_order_repository"
	repository_interfaces4 "rental-api/Domain/repository_interfaces/car_tag_repository"
	"rental-api/Domain/service_interfaces"
	"rental-api/Infrastructure/config"
	config2 "rental-api/Infrastructure/databases/postgres/config"
	"rental-api/Infrastructure/databases/postgres/mappers"
	"rental-api/Infrastructure/databases/postgres/repository/base/unit_of_work"
	repository3 "rental-api/Infrastructure/databases/postgres/repository/car_image_repository"
	"rental-api/Infrastructure/databases/postgres/repository/car_offer_repository"
	repository4 "rental-api/Infrastructure/databases/postgres/repository/car_order_repository"
	repository2 "rental-api/Infrastructure/databases/postgres/repository/car_tag_repository"
	"rental-api/Infrastructure/microservice_connector"
	"rental-api/Infrastructure/order_management"
)

// Injectors from wire.go:

func InitializeInfrastructureComponents() (*InfrastructureComponents, error) {
	configConfig := config.ProvideConfig()
	postgresDatabase := config2.NewPostgresConfigProvider(configConfig)
	persistenceMapper := mappers.ProvideCarOfferPersistenceMapper()
	unitOfWork := cqrs.ProvideUnitOfWork(postgresDatabase)
	carOfferQueryRepository := repository.ProvideCarOfferQueryRepository(postgresDatabase, persistenceMapper, unitOfWork)
	mappersPersistenceMapper := mappers.ProvideCarTagPersistenceMapper()
	carTagCommandRepository := repository2.ProvideCarTagCommandRepository(postgresDatabase, mappersPersistenceMapper, unitOfWork, carOfferQueryRepository)
	persistenceMapper2 := mappers.ProvideCarImagePersistenceMapper()
	carImageCommandRepository := repository3.ProvideCarImageCommandRepository(postgresDatabase, persistenceMapper2, unitOfWork)
	carOfferCommandRepository := repository.ProvideCarOfferCommandRepository(postgresDatabase, persistenceMapper, unitOfWork, carTagCommandRepository, carImageCommandRepository)
	persistenceMapper3 := mappers.ProvideCarOrderPersistenceMapper()
	carOrderQueryRepository := repository4.ProvideCarOrderQueryRepository(postgresDatabase, persistenceMapper3, unitOfWork)
	carOrderCommandRepository := repository4.ProvideCarOrderCommandRepository(postgresDatabase, persistenceMapper3, unitOfWork)
	carImageQueryRepository := repository3.ProvideCarImageQueryRepository(postgresDatabase, persistenceMapper2, unitOfWork)
	carTagQueryRepository := repository2.ProvideCarTagQueryRepository(postgresDatabase, mappersPersistenceMapper, unitOfWork)
	microserviceConnector := microservice_connector.ProvideMicroserviceConnectorImpl(configConfig)
	orderManagementSystem := order_management.ProvideOrderStatusChecker(carOrderQueryRepository, carOrderCommandRepository, carOfferQueryRepository, microserviceConnector)
	infrastructureComponents := &InfrastructureComponents{
		Config:                configConfig,
		CarOfferQueryRepo:     carOfferQueryRepository,
		CarOfferCommandRepo:   carOfferCommandRepository,
		CarOrderQueryRepo:     carOrderQueryRepository,
		CarOrderCommandRepo:   carOrderCommandRepository,
		CarImageQueryRepo:     carImageQueryRepository,
		CarImageCommandRepo:   carImageCommandRepository,
		CarTagQueryRepo:       carTagQueryRepository,
		CarTagCommandRepo:     carTagCommandRepository,
		connector:             microserviceConnector,
		orderManagementSystem: orderManagementSystem,
	}
	return infrastructureComponents, nil
}

func InitializeApi(carOfferQueryRepo repository_interfaces.CarOfferQueryRepository, carOfferCommandRepo repository_interfaces.CarOfferCommandRepository, carOrderQueryRepo repository_interfaces2.CarOrderQueryRepository, carOrderCommandRepo repository_interfaces2.CarOrderCommandRepository, carImageQueryRepo repository_interfaces3.CarImageQueryRepository, carImageCommandRepo repository_interfaces3.CarImageCommandRepository, carTagQueryRepo repository_interfaces4.CarTagQueryRepository, carTagCommandRepo repository_interfaces4.CarTagCommandRepository, connector service_interfaces.MicroserviceConnector, orderManagementSystem service_interfaces.OrderManagementSystem, config3 *config.Config) (*server.Server, error) {
	validate := validators.ProvideValidator()
	createCarOfferController := controllers.NewCreateCarOfferController(validate)
	updateCarOfferController := controllers.NewUpdateCarOfferController(validate)
	deleteCarOfferController := controllers.NewDeleteCarOfferController(validate)
	getCarOfferController := controllers.NewGetCarOfferController(validate)
	getCarOffersController := controllers.NewGetCarOffersController(validate)
	createCarOrderController := controllers2.NewCreateCarOrderController(validate)
	updateCarOrderController := controllers2.NewUpdateCarOrderController(validate)
	deleteCarOrderController := controllers2.NewDeleteCarOrderController(validate)
	getCarOrderController := controllers2.NewGetCarOrderController(validate)
	getCarOrdersController := controllers2.NewGetCarOrdersController(validate)
	addImageController := controllers3.NewAddImageController(validate)
	deleteImageController := controllers3.NewDeleteImageController(validate)
	getImagesController := controllers3.NewGetImagesController(validate)
	getTagsController := controllers4.NewGetTagsController(validate)
	v := controllers5.ProvideControllers(createCarOfferController, updateCarOfferController, deleteCarOfferController, getCarOfferController, getCarOffersController, createCarOrderController, updateCarOrderController, deleteCarOrderController, getCarOrderController, getCarOrdersController, addImageController, deleteImageController, getImagesController, getTagsController)
	controllersControllers := controllers5.NewControllers(v)
	serverServer := server.ProvideServer(controllersControllers, config3)
	return serverServer, nil
}

// wire.go:

type InfrastructureComponents struct {
	Config                *config.Config
	CarOfferQueryRepo     repository_interfaces.CarOfferQueryRepository
	CarOfferCommandRepo   repository_interfaces.CarOfferCommandRepository
	CarOrderQueryRepo     repository_interfaces2.CarOrderQueryRepository
	CarOrderCommandRepo   repository_interfaces2.CarOrderCommandRepository
	CarImageQueryRepo     repository_interfaces3.CarImageQueryRepository
	CarImageCommandRepo   repository_interfaces3.CarImageCommandRepository
	CarTagQueryRepo       repository_interfaces4.CarTagQueryRepository
	CarTagCommandRepo     repository_interfaces4.CarTagCommandRepository
	connector             service_interfaces.MicroserviceConnector
	orderManagementSystem service_interfaces.OrderManagementSystem
}
