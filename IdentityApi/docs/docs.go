// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/identity-api/api/login": {
            "post": {
                "description": "Authenticates a user and returns JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contract.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/contract.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/contract.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.LoginResponse"
                        }
                    }
                }
            }
        },
        "/identity-api/api/register": {
            "post": {
                "description": "Registers a new user with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contract.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.RegisterUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.RegisterUserResponse"
                        }
                    },
                    "500": {
                        "description": "Server error during registration",
                        "schema": {
                            "$ref": "#/definitions/contract.RegisterUserResponse"
                        }
                    }
                }
            }
        },
        "/identity-api/api/token/refresh": {
            "post": {
                "description": "Refreshes the JWT token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.RefreshTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/contract.RefreshTokenResponse"
                        }
                    }
                }
            }
        },
        "/identity-api/api/token/validate": {
            "get": {
                "description": "Validates the provided JWT token and returns user roles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Validate token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "schema": {
                            "$ref": "#/definitions/contract.ValidateTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.ValidateTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.ValidateTokenResponse"
                        }
                    },
                    "500": {
                        "description": "Server error during validation",
                        "schema": {
                            "$ref": "#/definitions/contract.ValidateTokenResponse"
                        }
                    }
                }
            }
        },
        "/identity-api/api/user": {
            "put": {
                "description": "Modifies user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Modify user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "User modification details",
                        "name": "modify",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User modified successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserResponse"
                        }
                    }
                }
            }
        },
        "/identity-api/api/user/id": {
            "get": {
                "description": "Retrieves user ID based on the provided token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User ID retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserIDResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserIDResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserIDResponse"
                        }
                    },
                    "500": {
                        "description": "Server error during retrieval",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserIDResponse"
                        }
                    }
                }
            }
        },
        "/identity-api/api/user/info": {
            "get": {
                "description": "Retrieves user information based on the provided token and user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User info retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse"
                        }
                    },
                    "500": {
                        "description": "Server error during retrieval",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse"
                        }
                    }
                }
            }
        },
        "/identity-api/api/user/{id}": {
            "delete": {
                "description": "Deletes a user from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.DeleteUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.DeleteUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.DeleteUserResponse"
                        }
                    }
                }
            }
        },
        "/identity-api/api/users": {
            "get": {
                "description": "Retrieves a list of all users with optional pagination and sorting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Current page",
                        "name": "current_page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Sort fields (format: field:direction)",
                        "name": "sort_fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.GetAllUsersResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/responses.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Server error during retrieval",
                        "schema": {
                            "$ref": "#/definitions/responses.BaseResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "constants.StatusCode": {
            "type": "integer",
            "enum": [
                200,
                201,
                400,
                404,
                500,
                409
            ],
            "x-enum-varnames": [
                "StatusOK",
                "StatusCreated",
                "StatusBadRequest",
                "StatusNotFound",
                "StatusInternalServerError",
                "StatusConflict"
            ]
        },
        "contract.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "contract.GetAllUsersResponse200": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "current_page": {
                            "type": "integer",
                            "example": 1
                        },
                        "has_next": {
                            "type": "boolean",
                            "example": true
                        },
                        "has_previous": {
                            "type": "boolean",
                            "example": false
                        },
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "address": {
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "city": {
                                        "type": "string",
                                        "example": "New York"
                                    },
                                    "email_address": {
                                        "type": "string",
                                        "example": "user@example.com"
                                    },
                                    "id": {
                                        "type": "string",
                                        "example": "12345"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "phone_number": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "example": "12345"
                                    },
                                    "roles": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "user",
                                            "admin"
                                        ]
                                    },
                                    "surname": {
                                        "type": "string",
                                        "example": "Doe"
                                    }
                                }
                            }
                        },
                        "page_size": {
                            "type": "integer",
                            "example": 10
                        },
                        "total_items": {
                            "type": "integer",
                            "example": 100
                        },
                        "total_pages": {
                            "type": "integer",
                            "example": 10
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Users retrieved successfully"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "contract.GetUserIDResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[user",
                        " admin]"
                    ]
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string",
                    "example": "12345"
                }
            }
        },
        "contract.GetUserInfoResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "email_address": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "12345"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "postal_code": {
                    "type": "string",
                    "example": "12345"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[user",
                        " admin]"
                    ]
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                },
                "surname": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "contract.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "contract.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[user",
                        " admin]"
                    ]
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "contract.ModifyUserRequest": {
            "type": "object",
            "required": [
                "address",
                "city",
                "name",
                "phone_number",
                "postal_code",
                "surname"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 5,
                    "example": "123 Main St"
                },
                "city": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "New York"
                },
                "email_address": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "John"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 5,
                    "example": "12345"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user",
                        "admin"
                    ]
                },
                "surname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "Doe"
                },
                "user_id": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "contract.ModifyUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "contract.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "contract.RegisterUserRequest": {
            "type": "object",
            "required": [
                "address",
                "city",
                "email_address",
                "name",
                "password",
                "phone_number",
                "postal_code",
                "surname"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "email_address": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "postal_code": {
                    "type": "string",
                    "example": "12345"
                },
                "surname": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "contract.RegisterUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string",
                    "example": "12345"
                }
            }
        },
        "contract.ValidateTokenResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[user",
                        " admin]"
                    ]
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "responses.BaseResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "$ref": "#/definitions/constants.StatusCode"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
