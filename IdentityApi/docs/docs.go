// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/identity-api/api/login": {
            "post": {
                "description": "Authenticates a user and returns JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contract.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/contract.LoginResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/contract.LoginResponse400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.LoginResponse401"
                        }
                    },
                    "500": {
                        "description": "Server error during login",
                        "schema": {
                            "$ref": "#/definitions/contract.LoginResponse500"
                        }
                    }
                }
            }
        },
        "/identity-api/api/register": {
            "post": {
                "description": "Registers a new user with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contract.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.RegisterUserResponse201"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.RegisterUserResponse400"
                        }
                    },
                    "500": {
                        "description": "Server error during registration",
                        "schema": {
                            "$ref": "#/definitions/contract.RegisterUserResponse500"
                        }
                    }
                }
            }
        },
        "/identity-api/api/token/refresh": {
            "post": {
                "description": "Refreshes the JWT token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.RefreshTokenResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.RefreshTokenResponse400"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/contract.RefreshTokenResponse401"
                        }
                    },
                    "500": {
                        "description": "Server error during token refresh",
                        "schema": {
                            "$ref": "#/definitions/contract.RefreshTokenResponse500"
                        }
                    }
                }
            }
        },
        "/identity-api/api/token/validate": {
            "get": {
                "description": "Validates the provided JWT token and returns user roles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Validate token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "schema": {
                            "$ref": "#/definitions/contract.ValidateTokenResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.ValidateTokenResponse400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.ValidateTokenResponse401"
                        }
                    },
                    "500": {
                        "description": "Server error during validation",
                        "schema": {
                            "$ref": "#/definitions/contract.ValidateTokenResponse500"
                        }
                    }
                }
            }
        },
        "/identity-api/api/user": {
            "put": {
                "description": "Modifies user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Modify user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "User modification details",
                        "name": "modify",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User modified successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserResponse400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserResponse401"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserResponse404"
                        }
                    },
                    "500": {
                        "description": "Server error during modification",
                        "schema": {
                            "$ref": "#/definitions/contract.ModifyUserResponse500"
                        }
                    }
                }
            }
        },
        "/identity-api/api/user/info": {
            "get": {
                "description": "Retrieves user information based on the provided token and user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User info retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse401"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse404"
                        }
                    },
                    "500": {
                        "description": "Server error during retrieval",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInfoResponse500"
                        }
                    }
                }
            }
        },
        "/identity-api/api/user/internal": {
            "get": {
                "description": "Retrieves user internal info based on the provided token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user internal info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User internal info retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInternalResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInternalResponse400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInternalResponse401"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInternalResponse404"
                        }
                    },
                    "500": {
                        "description": "Server error during retrieval",
                        "schema": {
                            "$ref": "#/definitions/contract.GetUserInternalResponse500"
                        }
                    }
                }
            }
        },
        "/identity-api/api/user/{id}": {
            "delete": {
                "description": "Deletes a user from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.DeleteUserResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.DeleteUserResponse400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.DeleteUserResponse401"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/contract.DeleteUserResponse404"
                        }
                    },
                    "500": {
                        "description": "Internal server error during deletion",
                        "schema": {
                            "$ref": "#/definitions/contract.DeleteUserResponse500"
                        }
                    }
                }
            }
        },
        "/identity-api/api/users": {
            "get": {
                "description": "Retrieves a list of all users with optional pagination and sorting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Current page",
                        "name": "current_page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Sort fields (format: field:direction)",
                        "name": "sort_fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/contract.GetAllUsersResponse200"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/contract.GetAllUsersResponse400"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contract.GetAllUsersResponse401"
                        }
                    },
                    "403": {
                        "description": "Insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/contract.GetAllUsersResponse403"
                        }
                    },
                    "500": {
                        "description": "Server error during retrieval",
                        "schema": {
                            "$ref": "#/definitions/contract.GetAllUsersResponse500"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "contract.DeleteUserResponse200": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User deleted successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "contract.DeleteUserResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.DeleteUserResponse401": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid or expired token"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.DeleteUserResponse404": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User not found"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.DeleteUserResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error during user deletion"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.GetAllUsersResponse200": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "current_page": {
                            "type": "integer",
                            "example": 1
                        },
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "address": {
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "city": {
                                        "type": "string",
                                        "example": "New York"
                                    },
                                    "email_address": {
                                        "type": "string",
                                        "example": "user@example.com"
                                    },
                                    "id": {
                                        "type": "string",
                                        "example": "12345"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "phone_number": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "example": "12345"
                                    },
                                    "roles": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "user",
                                            "admin"
                                        ]
                                    },
                                    "surname": {
                                        "type": "string",
                                        "example": "Doe"
                                    }
                                }
                            }
                        },
                        "page_size": {
                            "type": "integer",
                            "example": 10
                        },
                        "total_items": {
                            "type": "integer",
                            "example": 100
                        },
                        "total_pages": {
                            "type": "integer",
                            "example": 10
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Users retrieved successfully"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "contract.GetAllUsersResponse400": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.GetAllUsersResponse401": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Invalid or expired token"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.GetAllUsersResponse403": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Insufficient privileges"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.GetAllUsersResponse500": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Internal server error during retrieval"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.GetUserInfoResponse200": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User info retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "user_info": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string",
                            "example": "123 Main St"
                        },
                        "city": {
                            "type": "string",
                            "example": "New York"
                        },
                        "email_address": {
                            "type": "string",
                            "example": "user@example.com"
                        },
                        "id": {
                            "type": "string",
                            "example": "12345"
                        },
                        "name": {
                            "type": "string",
                            "example": "John"
                        },
                        "phone_number": {
                            "type": "string",
                            "example": "+1234567890"
                        },
                        "postal_code": {
                            "type": "string",
                            "example": "12345"
                        },
                        "roles": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "user",
                                "admin"
                            ]
                        },
                        "surname": {
                            "type": "string",
                            "example": "Doe"
                        }
                    }
                }
            }
        },
        "contract.GetUserInfoResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "user_info": {
                    "type": "object"
                }
            }
        },
        "contract.GetUserInfoResponse401": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid or expired token"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "user_info": {
                    "type": "object"
                }
            }
        },
        "contract.GetUserInfoResponse404": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User not found"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "user_info": {
                    "type": "object"
                }
            }
        },
        "contract.GetUserInfoResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error during user info retrieval"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "user_info": {
                    "type": "object"
                }
            }
        },
        "contract.GetUserInternalResponse200": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User ID retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "user_info": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string",
                            "example": "123 Main St"
                        },
                        "city": {
                            "type": "string",
                            "example": "New York"
                        },
                        "email_address": {
                            "type": "string",
                            "example": "user@example.com"
                        },
                        "id": {
                            "type": "string",
                            "example": "12345"
                        },
                        "name": {
                            "type": "string",
                            "example": "John"
                        },
                        "phone_number": {
                            "type": "string",
                            "example": "+1234567890"
                        },
                        "postal_code": {
                            "type": "string",
                            "example": "12345"
                        },
                        "roles": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "user",
                                "admin"
                            ]
                        },
                        "surname": {
                            "type": "string",
                            "example": "Doe"
                        }
                    }
                }
            }
        },
        "contract.GetUserInternalResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "user_info": {
                    "type": "object"
                }
            }
        },
        "contract.GetUserInternalResponse401": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid or expired token"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "user_info": {
                    "type": "object"
                }
            }
        },
        "contract.GetUserInternalResponse404": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User not found"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "user_info": {
                    "type": "object"
                }
            }
        },
        "contract.GetUserInternalResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error during user ID retrieval"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "user_info": {
                    "type": "object"
                }
            }
        },
        "contract.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "contract.LoginResponse200": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[user",
                        " admin]"
                    ]
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "contract.LoginResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "refresh_token": {
                    "type": "string",
                    "example": ""
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "contract.LoginResponse401": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid credentials"
                },
                "refresh_token": {
                    "type": "string",
                    "example": ""
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "contract.LoginResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error during login"
                },
                "refresh_token": {
                    "type": "string",
                    "example": ""
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "contract.ModifyUserRequest": {
            "type": "object",
            "required": [
                "address",
                "city",
                "name",
                "phone_number",
                "postal_code",
                "surname"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 5,
                    "example": "123 Main St"
                },
                "city": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "New York"
                },
                "email_address": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "John"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 5,
                    "example": "12345"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user",
                        "admin"
                    ]
                },
                "surname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "Doe"
                },
                "user_id": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "contract.ModifyUserResponse200": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User modified successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "contract.ModifyUserResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.ModifyUserResponse401": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid or expired token"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.ModifyUserResponse404": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User not found"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.ModifyUserResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error during user modification"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.RefreshTokenResponse200": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Token refreshed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "contract.RefreshTokenResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "contract.RefreshTokenResponse401": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid refresh token"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "contract.RefreshTokenResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error during token refresh"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "contract.RegisterUserRequest": {
            "type": "object",
            "required": [
                "address",
                "city",
                "email_address",
                "name",
                "password",
                "phone_number",
                "postal_code",
                "surname"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "email_address": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "P@ssw0rd123"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "postal_code": {
                    "type": "string",
                    "example": "12345"
                },
                "surname": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "contract.RegisterUserResponse201": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User registered successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "user_id": {
                    "type": "string",
                    "example": "12345"
                }
            }
        },
        "contract.RegisterUserResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.RegisterUserResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error during registration"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.ValidateTokenResponse200": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Token validated successfully"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[user",
                        " admin]"
                    ]
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "contract.ValidateTokenResponse400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valid": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.ValidateTokenResponse401": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid or expired token"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valid": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "contract.ValidateTokenResponse500": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error during token validation"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valid": {
                    "type": "boolean",
                    "example": false
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
