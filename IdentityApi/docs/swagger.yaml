definitions:
  constants.StatusCode:
    enum:
    - 200
    - 201
    - 400
    - 404
    - 500
    - 409
    type: integer
    x-enum-varnames:
    - StatusOK
    - StatusCreated
    - StatusBadRequest
    - StatusNotFound
    - StatusInternalServerError
    - StatusConflict
  contract.DeleteUserResponse:
    properties:
      message:
        type: string
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
    type: object
  contract.GetAllUsersResponse:
    properties:
      message:
        type: string
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
      users:
        items:
          type: object
        type: array
    type: object
  contract.GetUserIDResponse:
    properties:
      message:
        type: string
      roles:
        example:
        - '[user'
        - ' admin]'
        items:
          type: string
        type: array
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
      user_id:
        example: "12345"
        type: string
    type: object
  contract.GetUserInfoResponse:
    properties:
      address:
        example: 123 Main St
        type: string
      city:
        example: New York
        type: string
      email_address:
        example: user@example.com
        type: string
      id:
        example: "12345"
        type: string
      message:
        type: string
      name:
        example: John
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      postal_code:
        example: "12345"
        type: string
      roles:
        example:
        - '[user'
        - ' admin]'
        items:
          type: string
        type: array
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
      surname:
        example: Doe
        type: string
    type: object
  contract.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  contract.LoginResponse:
    properties:
      message:
        type: string
      roles:
        example:
        - '[user'
        - ' admin]'
        items:
          type: string
        type: array
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
    type: object
  contract.ModifyUserRequest:
    properties:
      address:
        example: 123 Main St
        type: string
      city:
        example: New York
        type: string
      email_address:
        example: user@example.com
        type: string
      name:
        example: John
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      postal_code:
        example: "12345"
        type: string
      roles:
        example:
        - '[user'
        - ' admin]'
        items:
          type: string
        type: array
      surname:
        example: Doe
        type: string
      user_id:
        example: "1234567890"
        type: string
    type: object
  contract.ModifyUserResponse:
    properties:
      message:
        type: string
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
    type: object
  contract.RefreshTokenResponse:
    properties:
      message:
        type: string
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
    type: object
  contract.RegisterUserRequest:
    properties:
      address:
        example: 123 Main St
        type: string
      city:
        example: New York
        type: string
      email_address:
        example: user@example.com
        type: string
      name:
        example: John
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      postal_code:
        example: "12345"
        type: string
      surname:
        example: Doe
        type: string
    required:
    - address
    - city
    - email_address
    - name
    - password
    - phone_number
    - postal_code
    - surname
    type: object
  contract.RegisterUserResponse:
    properties:
      message:
        type: string
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
      user_id:
        example: "12345"
        type: string
    type: object
  contract.ValidateTokenResponse:
    properties:
      message:
        type: string
      roles:
        example:
        - '[user'
        - ' admin]'
        items:
          type: string
        type: array
      status_code:
        $ref: '#/definitions/constants.StatusCode'
      success:
        type: boolean
      valid:
        example: true
        type: boolean
    type: object
info:
  contact: {}
paths:
  /identity-api/api/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/contract.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/contract.LoginResponse'
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/contract.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.LoginResponse'
      summary: Login user
      tags:
      - auth
  /identity-api/api/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided details.
      parameters:
      - description: User registration details
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/contract.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/contract.RegisterUserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.RegisterUserResponse'
        "500":
          description: Server error during registration
          schema:
            $ref: '#/definitions/contract.RegisterUserResponse'
      summary: Register a new user
      tags:
      - users
  /identity-api/api/token/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the JWT token using a refresh token
      parameters:
      - description: Refresh token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/contract.RefreshTokenResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.RefreshTokenResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/contract.RefreshTokenResponse'
      summary: Refresh token
      tags:
      - auth
  /identity-api/api/token/validate:
    get:
      consumes:
      - application/json
      description: Validates the provided JWT token and returns user roles.
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            $ref: '#/definitions/contract.ValidateTokenResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.ValidateTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.ValidateTokenResponse'
        "500":
          description: Server error during validation
          schema:
            $ref: '#/definitions/contract.ValidateTokenResponse'
      summary: Validate token
      tags:
      - users
  /identity-api/api/user:
    put:
      consumes:
      - application/json
      description: Modifies user information
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      - description: User modification details
        in: body
        name: modify
        required: true
        schema:
          $ref: '#/definitions/contract.ModifyUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User modified successfully
          schema:
            $ref: '#/definitions/contract.ModifyUserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.ModifyUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.ModifyUserResponse'
      summary: Modify user
      tags:
      - users
  /identity-api/api/user/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user from the system
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/contract.DeleteUserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.DeleteUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.DeleteUserResponse'
      summary: Delete user
      tags:
      - users
  /identity-api/api/user/{id}/info:
    get:
      consumes:
      - application/json
      description: Retrieves user information based on the provided token and user
        ID.
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User info retrieved successfully
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse'
        "500":
          description: Server error during retrieval
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse'
      summary: Get user info
      tags:
      - users
  /identity-api/api/user/id:
    get:
      consumes:
      - application/json
      description: Retrieves user ID based on the provided token.
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User ID retrieved successfully
          schema:
            $ref: '#/definitions/contract.GetUserIDResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.GetUserIDResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/contract.GetUserIDResponse'
        "500":
          description: Server error during retrieval
          schema:
            $ref: '#/definitions/contract.GetUserIDResponse'
      summary: Get user ID
      tags:
      - users
  /identity-api/api/users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all users.
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/contract.GetAllUsersResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.GetAllUsersResponse'
        "500":
          description: Server error during retrieval
          schema:
            $ref: '#/definitions/contract.GetAllUsersResponse'
      summary: Get all users
      tags:
      - users
swagger: "2.0"
