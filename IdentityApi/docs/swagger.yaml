definitions:
  contract.DeleteUserResponse200:
    properties:
      message:
        example: User deleted successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  contract.DeleteUserResponse400:
    properties:
      message:
        example: Invalid request parameters
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.DeleteUserResponse401:
    properties:
      message:
        example: Invalid or expired token
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.DeleteUserResponse404:
    properties:
      message:
        example: User not found
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.DeleteUserResponse500:
    properties:
      message:
        example: Internal server error during user deletion
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.GetAllUsersResponse200:
    properties:
      data:
        properties:
          current_page:
            example: 1
            type: integer
          items:
            items:
              properties:
                address:
                  example: 123 Main St
                  type: string
                city:
                  example: New York
                  type: string
                email_address:
                  example: user@example.com
                  type: string
                id:
                  example: "12345"
                  type: string
                name:
                  example: John
                  type: string
                phone_number:
                  example: "+1234567890"
                  type: string
                postal_code:
                  example: "12345"
                  type: string
                roles:
                  example:
                  - user
                  - admin
                  items:
                    type: string
                  type: array
                surname:
                  example: Doe
                  type: string
              type: object
            type: array
          page_size:
            example: 10
            type: integer
          total_items:
            example: 100
            type: integer
          total_pages:
            example: 10
            type: integer
        type: object
      message:
        example: Users retrieved successfully
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  contract.GetAllUsersResponse400:
    properties:
      data:
        items:
          type: object
        type: array
      message:
        example: Invalid request parameters
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.GetAllUsersResponse401:
    properties:
      data:
        items:
          type: object
        type: array
      message:
        example: Invalid or expired token
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.GetAllUsersResponse403:
    properties:
      data:
        items:
          type: object
        type: array
      message:
        example: Insufficient privileges
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.GetAllUsersResponse500:
    properties:
      data:
        items:
          type: object
        type: array
      message:
        example: Internal server error during retrieval
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.GetUserInfoResponse200:
    properties:
      message:
        example: User info retrieved successfully
        type: string
      success:
        example: true
        type: boolean
      user_info:
        properties:
          address:
            example: 123 Main St
            type: string
          city:
            example: New York
            type: string
          email_address:
            example: user@example.com
            type: string
          id:
            example: "12345"
            type: string
          name:
            example: John
            type: string
          phone_number:
            example: "+1234567890"
            type: string
          postal_code:
            example: "12345"
            type: string
          roles:
            example:
            - user
            - admin
            items:
              type: string
            type: array
          surname:
            example: Doe
            type: string
        type: object
    type: object
  contract.GetUserInfoResponse400:
    properties:
      message:
        example: Invalid request parameters
        type: string
      success:
        example: false
        type: boolean
      user_info:
        type: object
    type: object
  contract.GetUserInfoResponse401:
    properties:
      message:
        example: Invalid or expired token
        type: string
      success:
        example: false
        type: boolean
      user_info:
        type: object
    type: object
  contract.GetUserInfoResponse404:
    properties:
      message:
        example: User not found
        type: string
      success:
        example: false
        type: boolean
      user_info:
        type: object
    type: object
  contract.GetUserInfoResponse500:
    properties:
      message:
        example: Internal server error during user info retrieval
        type: string
      success:
        example: false
        type: boolean
      user_info:
        type: object
    type: object
  contract.GetUserInternalResponse200:
    properties:
      message:
        example: User ID retrieved successfully
        type: string
      success:
        example: true
        type: boolean
      user_info:
        properties:
          address:
            example: 123 Main St
            type: string
          city:
            example: New York
            type: string
          email_address:
            example: user@example.com
            type: string
          id:
            example: "12345"
            type: string
          name:
            example: John
            type: string
          phone_number:
            example: "+1234567890"
            type: string
          postal_code:
            example: "12345"
            type: string
          roles:
            example:
            - user
            - admin
            items:
              type: string
            type: array
          surname:
            example: Doe
            type: string
        type: object
    type: object
  contract.GetUserInternalResponse400:
    properties:
      message:
        example: Invalid request parameters
        type: string
      success:
        example: false
        type: boolean
      user_info:
        type: object
    type: object
  contract.GetUserInternalResponse401:
    properties:
      message:
        example: Invalid or expired token
        type: string
      success:
        example: false
        type: boolean
      user_info:
        type: object
    type: object
  contract.GetUserInternalResponse404:
    properties:
      message:
        example: User not found
        type: string
      success:
        example: false
        type: boolean
      user_info:
        type: object
    type: object
  contract.GetUserInternalResponse500:
    properties:
      message:
        example: Internal server error during user ID retrieval
        type: string
      success:
        example: false
        type: boolean
      user_info:
        type: object
    type: object
  contract.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: P@ssw0rd123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  contract.LoginResponse200:
    properties:
      message:
        example: Login successful
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      roles:
        example:
        - '[user'
        - ' admin]'
        items:
          type: string
        type: array
      success:
        example: true
        type: boolean
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  contract.LoginResponse400:
    properties:
      message:
        example: Invalid request parameters
        type: string
      refresh_token:
        example: ""
        type: string
      roles:
        example:
        - '[]'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
      token:
        example: ""
        type: string
    type: object
  contract.LoginResponse401:
    properties:
      message:
        example: Invalid credentials
        type: string
      refresh_token:
        example: ""
        type: string
      roles:
        example:
        - '[]'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
      token:
        example: ""
        type: string
    type: object
  contract.LoginResponse500:
    properties:
      message:
        example: Internal server error during login
        type: string
      refresh_token:
        example: ""
        type: string
      roles:
        example:
        - '[]'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
      token:
        example: ""
        type: string
    type: object
  contract.ModifyUserRequest:
    properties:
      address:
        example: 123 Main St
        maxLength: 100
        minLength: 5
        type: string
      city:
        example: New York
        maxLength: 50
        minLength: 2
        type: string
      email_address:
        example: user@example.com
        type: string
      name:
        example: John
        maxLength: 50
        minLength: 2
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      postal_code:
        example: "12345"
        maxLength: 10
        minLength: 5
        type: string
      roles:
        example:
        - user
        - admin
        items:
          type: string
        type: array
      surname:
        example: Doe
        maxLength: 50
        minLength: 2
        type: string
      user_id:
        example: "1234567890"
        type: string
    required:
    - address
    - city
    - name
    - phone_number
    - postal_code
    - surname
    type: object
  contract.ModifyUserResponse200:
    properties:
      message:
        example: User modified successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  contract.ModifyUserResponse400:
    properties:
      message:
        example: Invalid request parameters
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.ModifyUserResponse401:
    properties:
      message:
        example: Invalid or expired token
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.ModifyUserResponse404:
    properties:
      message:
        example: User not found
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.ModifyUserResponse500:
    properties:
      message:
        example: Internal server error during user modification
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.RefreshTokenResponse200:
    properties:
      message:
        example: Token refreshed successfully
        type: string
      success:
        example: true
        type: boolean
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  contract.RefreshTokenResponse400:
    properties:
      message:
        example: Invalid request parameters
        type: string
      success:
        example: false
        type: boolean
      token:
        example: ""
        type: string
    type: object
  contract.RefreshTokenResponse401:
    properties:
      message:
        example: Invalid refresh token
        type: string
      success:
        example: false
        type: boolean
      token:
        example: ""
        type: string
    type: object
  contract.RefreshTokenResponse500:
    properties:
      message:
        example: Internal server error during token refresh
        type: string
      success:
        example: false
        type: boolean
      token:
        example: ""
        type: string
    type: object
  contract.RegisterUserRequest:
    properties:
      address:
        example: 123 Main St
        type: string
      city:
        example: New York
        type: string
      email_address:
        example: user@example.com
        type: string
      name:
        example: John
        type: string
      password:
        example: P@ssw0rd123
        minLength: 8
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      postal_code:
        example: "12345"
        type: string
      surname:
        example: Doe
        type: string
    required:
    - address
    - city
    - email_address
    - name
    - password
    - phone_number
    - postal_code
    - surname
    type: object
  contract.RegisterUserResponse201:
    properties:
      message:
        example: User registered successfully
        type: string
      success:
        example: true
        type: boolean
      user_id:
        example: "12345"
        type: string
    type: object
  contract.RegisterUserResponse400:
    properties:
      message:
        example: Invalid request parameters
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.RegisterUserResponse500:
    properties:
      message:
        example: Internal server error during registration
        type: string
      success:
        example: false
        type: boolean
    type: object
  contract.ValidateTokenResponse200:
    properties:
      message:
        example: Token validated successfully
        type: string
      roles:
        example:
        - '[user'
        - ' admin]'
        items:
          type: string
        type: array
      success:
        example: true
        type: boolean
      valid:
        example: true
        type: boolean
    type: object
  contract.ValidateTokenResponse400:
    properties:
      message:
        example: Invalid request parameters
        type: string
      roles:
        example:
        - '[]'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
      valid:
        example: false
        type: boolean
    type: object
  contract.ValidateTokenResponse401:
    properties:
      message:
        example: Invalid or expired token
        type: string
      roles:
        example:
        - '[]'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
      valid:
        example: false
        type: boolean
    type: object
  contract.ValidateTokenResponse500:
    properties:
      message:
        example: Internal server error during token validation
        type: string
      roles:
        example:
        - '[]'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
      valid:
        example: false
        type: boolean
    type: object
info:
  contact: {}
paths:
  /identity-api/api/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/contract.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/contract.LoginResponse200'
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/contract.LoginResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.LoginResponse401'
        "500":
          description: Server error during login
          schema:
            $ref: '#/definitions/contract.LoginResponse500'
      summary: Login user
      tags:
      - auth
  /identity-api/api/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided details.
      parameters:
      - description: User registration details
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/contract.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/contract.RegisterUserResponse201'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.RegisterUserResponse400'
        "500":
          description: Server error during registration
          schema:
            $ref: '#/definitions/contract.RegisterUserResponse500'
      summary: Register a new user
      tags:
      - users
  /identity-api/api/token/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the JWT token using a refresh token
      parameters:
      - description: Refresh token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/contract.RefreshTokenResponse200'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.RefreshTokenResponse400'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/contract.RefreshTokenResponse401'
        "500":
          description: Server error during token refresh
          schema:
            $ref: '#/definitions/contract.RefreshTokenResponse500'
      summary: Refresh token
      tags:
      - auth
  /identity-api/api/token/validate:
    get:
      consumes:
      - application/json
      description: Validates the provided JWT token and returns user roles.
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            $ref: '#/definitions/contract.ValidateTokenResponse200'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.ValidateTokenResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.ValidateTokenResponse401'
        "500":
          description: Server error during validation
          schema:
            $ref: '#/definitions/contract.ValidateTokenResponse500'
      summary: Validate token
      tags:
      - users
  /identity-api/api/user:
    put:
      consumes:
      - application/json
      description: Modifies user information
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      - description: User modification details
        in: body
        name: modify
        required: true
        schema:
          $ref: '#/definitions/contract.ModifyUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User modified successfully
          schema:
            $ref: '#/definitions/contract.ModifyUserResponse200'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.ModifyUserResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.ModifyUserResponse401'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/contract.ModifyUserResponse404'
        "500":
          description: Server error during modification
          schema:
            $ref: '#/definitions/contract.ModifyUserResponse500'
      summary: Modify user
      tags:
      - users
  /identity-api/api/user/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user from the system
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/contract.DeleteUserResponse200'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.DeleteUserResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.DeleteUserResponse401'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/contract.DeleteUserResponse404'
        "500":
          description: Internal server error during deletion
          schema:
            $ref: '#/definitions/contract.DeleteUserResponse500'
      summary: Delete user
      tags:
      - users
  /identity-api/api/user/info:
    get:
      consumes:
      - application/json
      description: Retrieves user information based on the provided token and user
        ID.
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      - description: User ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User info retrieved successfully
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse200'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse401'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse404'
        "500":
          description: Server error during retrieval
          schema:
            $ref: '#/definitions/contract.GetUserInfoResponse500'
      summary: Get user info
      tags:
      - users
  /identity-api/api/user/internal:
    get:
      consumes:
      - application/json
      description: Retrieves user internal info based on the provided token.
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User internal info retrieved successfully
          schema:
            $ref: '#/definitions/contract.GetUserInternalResponse200'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.GetUserInternalResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.GetUserInternalResponse401'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/contract.GetUserInternalResponse404'
        "500":
          description: Server error during retrieval
          schema:
            $ref: '#/definitions/contract.GetUserInternalResponse500'
      summary: Get user internal info
      tags:
      - users
  /identity-api/api/users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all users with optional pagination and sorting.
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Current page
        in: query
        name: current_page
        type: integer
      - collectionFormat: csv
        description: 'Sort fields (format: field:direction)'
        in: query
        items:
          type: string
        name: sort_fields
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/contract.GetAllUsersResponse200'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/contract.GetAllUsersResponse400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contract.GetAllUsersResponse401'
        "403":
          description: Insufficient privileges
          schema:
            $ref: '#/definitions/contract.GetAllUsersResponse403'
        "500":
          description: Server error during retrieval
          schema:
            $ref: '#/definitions/contract.GetAllUsersResponse500'
      summary: Get all users
      tags:
      - users
swagger: "2.0"
