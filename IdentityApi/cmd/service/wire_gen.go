// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"identity-api/API/controllers"
	"identity-api/API/server"
	"identity-api/API/validators"
	"identity-api/Domain/repository_interfaces/user_repository"
	"identity-api/Domain/service_interfaces"
	"identity-api/Infrastructure/config"
	config2 "identity-api/Infrastructure/databases/postgres/config"
	"identity-api/Infrastructure/databases/postgres/mappers"
	"identity-api/Infrastructure/databases/postgres/repository/user_repository"
	"identity-api/Infrastructure/databases/redis/config"
	repository2 "identity-api/Infrastructure/databases/redis/repository/refresh_token_repository"
	"identity-api/Infrastructure/jwt_tocken_service"
	"identity-api/Infrastructure/password_hasher"
)

// Injectors from wire.go:

func InitializeInfrastructureComponents() (*InfrastructureComponents, error) {
	configConfig := config.ProvideConfig()
	postgresDatabase := config2.NewPostgresConfigProvider(configConfig)
	persistenceMapper := mappers.ProvideUserPersistenceMapper()
	userQueryRepository := repository.ProvideUserQueryRepository(postgresDatabase, persistenceMapper)
	userCommandRepository := repository.ProvideUserCommandRepository(postgresDatabase, persistenceMapper)
	redisDatabase, err := redis_config.NewRedisConfigProvider(configConfig)
	if err != nil {
		return nil, err
	}
	refreshTokenCommandRepository := repository2.ProvideRefreshTokenCommandRepository(redisDatabase)
	refreshTokenQueryRepository := repository2.ProvideRefreshTokenQueryRepository(redisDatabase)
	jwtTokenService := jwt_token_service.ProvideJWTTokenService(configConfig, refreshTokenCommandRepository, refreshTokenQueryRepository, userQueryRepository)
	passwordHasher := password_hasher.ProvidePasswordHasher()
	infrastructureComponents := &InfrastructureComponents{
		Config:          configConfig,
		UserQueryRepo:   userQueryRepository,
		UserCommandRepo: userCommandRepository,
		TokenService:    jwtTokenService,
		PasswordHasher:  passwordHasher,
	}
	return infrastructureComponents, nil
}

func InitializeApi(userQueryRepo repository_interfaces.UserQueryRepository, userCommandRepo repository_interfaces.UserCommandRepository, tokenService service_interfaces.JWTTokenService, passwordHasher service_interfaces.PasswordHasher, config3 *config.Config) (*server.Server, error) {
	validate := validators.ProvideValidator()
	getAllUsersController := controllers.NewGetAllUsersController(validate)
	getUserInternalController := controllers.NewGetUserInternalController(validate)
	getUserInfoController := controllers.NewGetUserInfoController(validate)
	registerController := controllers.NewRegisterController(validate)
	loginController := controllers.NewLoginController(validate)
	modifyUserController := controllers.NewModifyUserController(validate)
	deleteUserController := controllers.NewDeleteUserController(validate)
	validateTokenController := controllers.NewValidateTokenController(validate)
	refreshTokenController := controllers.NewRefreshTokenController(validate)
	v := controllers.ProvideControllers(getAllUsersController, getUserInternalController, getUserInfoController, registerController, loginController, modifyUserController, deleteUserController, validateTokenController, refreshTokenController)
	controllersControllers := controllers.NewControllers(v)
	serverServer := server.ProvideServer(controllersControllers, config3)
	return serverServer, nil
}

// wire.go:

type InfrastructureComponents struct {
	Config          *config.Config
	UserQueryRepo   repository_interfaces.UserQueryRepository
	UserCommandRepo repository_interfaces.UserCommandRepository
	TokenService    service_interfaces.JWTTokenService
	PasswordHasher  service_interfaces.PasswordHasher
}
